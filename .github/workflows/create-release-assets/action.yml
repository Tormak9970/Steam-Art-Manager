name: 'create-release-assets'
description: 'Creates release assets.'
author: 'Tormak'
inputs:
  GITHUB_TOKEN:
    description: "Your GitHub token."
    required: true
    
  git_branch:
    description: "The target release branch."
    required: true
    
  release_id:
    description: "The target release id."
    required: true

  release_tag:
    description: "The target release tag."
    required: true

  change_log:
    description: "The target release change log."
    required: false

runs:
  using: 'composite'
  steps:
    - name: Update Release Assets
      uses: actions/github-script@v6
      env:
        GITHUB_TOKEN: ${{ inputs.GITHUB_TOKEN }}
        release_id: ${{ inputs.release_id }}
        release_tag: ${{ inputs.release_tag }}
        git_branch: ${{ inputs.git_branch }}
        change_log: ${{ inputs.change_log }}
      with:
        script: |
          const fs = require("fs");
          const path = require("path");
          const childProcess = require("child_process");

          async function getReleaseAssetContents(id) {
            const contents = (
              await github.request(
                'GET /repos/{owner}/{repo}/releases/assets/{asset_id}',
                {
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  asset_id: id,
                  headers: {
                    accept: 'application/octet-stream',
                  },
                }
              )
            ).data;
            return contents;
          }

          async function deleteReleaseAsset(id) {
            await github.rest.repos.deleteReleaseAsset({
              owner: context.repo.owner,
              repo: context.repo.repo,
              asset_id: id
            });
          }

          async function uploadReleaseAsset(name, contents) {
            await github.rest.repos.uploadReleaseAsset({
              owner: context.repo.owner,
              repo: context.repo.repo,
              release_id: process.env.release_id,
              name: name,
              data: contents
            });
          }

          async function setReleaseAssetName(id, newName) {
            await github.rest.repos.updateReleaseAsset({
              owner: context.repo.owner,
              repo: context.repo.repo,
              asset_id: id,
              name: newName
            });
          }


          async function generateAppimageAssets() {
            const APPIMAGE_NAME = "steam-art-manager.AppImage";

            const WORK_DIR_PATH = path.resolve(process.cwd(), "appimage-build-dir");
            const APPIMAGE_BUILD_SCRIPT_PATH = path.resolve(process.cwd(), "build-resources", "buildappimage-webkit.sh");
            const APPIMAGE_OUTPUT_PATH = ""; // TODO: this needs to be set
            
            const DEB_PATH = path.resolve(WORK_DIR_PATH, "steam-art-manager.deb");

            fs.mkdirSync(WORK_DIR_PATH);

            const deb = assets.data.find((asset) => asset.name.endsWith(".deb"));
            const contents = Buffer.from(await getReleaseAssetContents(deb.id));

            fs.writeFileSync(DEB_PATH, contents);

            await childProcess.exec(`${APPIMAGE_BUILD_SCRIPT_PATH} \"${DEB_PATH}\"`);

            const appimageContents = fs.readFileSync(APPIMAGE_OUTPUT_PATH);
            await uploadReleaseAsset(APPIMAGE_NAME, appimageContents);

            // TODO: fs.rmSync(APPIMAGE_OUTPUT_PATH);
            fs.rmSync(WORK_DIR_PATH, { recursive: true });
          }
          

          const appimageInstallerPath = path.resolve(process.cwd(), "build-resources", "appimage-installer.sh");
          const appimageInstallerContents = fs.readFileSync(appimageInstallerPath, "utf-8");
          core.info(`Release Tag: ${process.env.release_tag}`);

          const modifiedContents = appimageInstallerContents.replace("VALUE_TO_SEARCH_FOR", process.env.release_tag);
          await uploadReleaseAsset("appimage-installer.sh", Buffer.from(modifiedContents));
          core.info("Uploaded appimage installer to release.");


          // await generateAppimageAssets(); // TODO: this needs to be run


          if (process.env.git_branch == "release") {
            const versionNoV = process.env.release_tag.substring(1);

            const RENAME_CONFIGS = [
              // MSI
              {
                extension: ".msi",
                newName: "steam-art-manager.msi"
              },
              {
                extension: ".msi.zip",
                newName: `steam-art-manager_${versionNoV}.msi.zip`
              },
              {
                extension: ".msi.zip.sig",
                newName: `steam-art-manager_${versionNoV}.msi.zip.sig`
              },
              // DEB
              {
                extension: ".deb",
                newName: "steam-art-manager.deb"
              },
              {
                extension: ".deb.tar.gz",
                newName: `steam-art-manager_${versionNoV}.deb.tar.gz`
              },
              {
                extension: ".AppImage.tar.gz.sig",
                newName: `steam-art-manager_${versionNoV}.deb.tar.gz.sig`
              },
            ];

            const assets = await github.rest.repos.listReleaseAssets({
              owner: context.repo.owner,
              repo: context.repo.repo,
              release_id: process.env.release_id
            });

            for (const renameConfig of RENAME_CONFIGS) {
              const asset = assets.data.find((asset) => asset.name.endsWith(renameConfig.extension));
              
              if (asset) {
                await setReleaseAssetName(asset.id, renameConfig.newName);
              }
            }
            
            const msiUpdater = assets.data.find((asset) => asset.name.endsWith(".msi.zip"));
            const appimageUpdater = assets.data.find((asset) => asset.name.endsWith(".AppImage.tar.gz"));


            const latest = assets.data.find((asset) => asset.name === "latest.json");
            const latestContentsBuff = Buffer.from(await getReleaseAssetContents(latest.id));

            let latestContents = latestContentsBuff.toString();
            latestContents = latestContents.replace(msiUpdater.name, `steam-art-manager_${versionNoV}.msi.zip`);
            latestContents = latestContents.replace(appimageUpdater.name, `steam-art-manager_${versionNoV}.AppImage.tar.gz`);

            const latestContentsJson = JSON.parse(latestContents);
            latestContentsJson.notes = process.env.change_log;
            latestContents = JSON.stringify(latestContentsJson, null, '\t');

            await deleteReleaseAsset(latest.id);
            await uploadReleaseAsset("latest.json", Buffer.from(latestContents));

            const latestPath = path.resolve(process.cwd(), "latest.json");
            fs.writeFileSync(latestPath, Buffer.from(latestContents));

            
            const config = (prop, value) => exec.exec(`git config ${prop} "${value}"`);
            const add = (file) => exec.exec(`git add ${file}`);
            const commit = (message) => exec.exec(`git commit -m "${message}"`);
            const push = (branch) => exec.exec(`git push origin ${branch} --follow-tags`);
            const updateOrigin = (repo) => exec.exec(`git remote set-url origin ${repo}`);
            
            core.setSecret(process.env.GITHUB_TOKEN);
            
            updateOrigin(`https://x-access-token:${process.env.GITHUB_TOKEN}@github.com/${process.env.GITHUB_REPOSITORY}.git`);
            config('user.email', "sarm.release.action@github.com");
            config('user.name', "SARM Release Action");

            await add(".");
            await commit("chore(release): updating latest.json to generated version.");
            await push(process.env.git_branch);

            core.info("Committed changes to latest.json.");
          } else {
            core.info("Skipping latest.json upload for debug release.");
          }
